Glosario
==================

Apps
-------------------

..  automodule:: rol.apps
    :members:

Admin
-------------------
from django.contrib import admin
from .models import Rol, Permiso

# # Register your models here.

admin.site.register(Rol)

admin.site.register(Permiso)

Forms
-------------------
from django import forms
from rol.models import *
from django import forms
from django.forms import CharField, Form

#class BuscarRol(Form):
#    """
#    Formulario para buscar un Rol por nombre
#    """
#    Nombre = CharField()

class CreateRolForm(forms.ModelForm):
    """
    Formulario para crear un Rol
    """
    class Meta:
        model = Rol
        fields = [
            'nombre',
            'descripcion',
            'permisos'
        ]
        labels = {
            'nombre': 'Nombre del rol',
            'descripcion': 'Descripcion ',
            'permisos': 'Permisos',

        }
        widgets = {
            'permisos': forms.CheckboxSelectMultiple(),
        }

    def __init__(self, *args, **kwargs):
        super(CreateRolForm, self).__init__(*args, **kwargs)
        # permisos_all = Permiso.objects.filter(tipo=2)
        permisos_all = Permiso.objects.filter()
        p = self.fields['permisos'].widget
        permisos = []
        for permiso in permisos_all:
            permisos.append((permiso.id, permiso.nombre))
        p.choices = permisos

    def clean_permiso(self):
        permisos = self.cleaned_data['permisos']
        try:
            pr = Permiso.objects.get(permisos = permisos)
        except:
            return self.cleaned_data['permisos']
        raise forms.ValidationError('Debe seleccionar al menos uno')


class UpdateRolForm(forms.ModelForm):
    """
    Formulario para modificar un Rol
    """
    class Meta:
        model = Rol
        fields = [
            'nombre',
            'descripcion',
            'permisos'
        ]
        labels = {
            'nombre': 'Nombre del rol',
            'descripcion': 'Descripcion ',
            'permisos': 'Permisos',

        }
        widgets = {
        'permisos': forms.CheckboxSelectMultiple(),
        }

    def __init__(self, *args, **kwargs):
        super(UpdateRolForm, self).__init__(*args, **kwargs)
        #permisos_all = Permiso.objects.filter(tipo=2)
        permisos_all = Permiso.objects.filter()
        p = self.fields['permisos'].widget
        permisos = []
        for permiso in permisos_all:
            permisos.append((permiso.id, permiso.nombre))
        p.choices = permisos

    def clean_permiso(self):
        permisos = self.cleaned_data['permisos']
        try:
            pr = Permiso.objects.get(permisos = permisos)
        except:
            return self.cleaned_data['permisos']
        raise forms.ValidationError('Debe seleccionar al menos uno')

Models
-------------------
from django.db import models

# Create your models here.
"""
Definicion de los modelos de Permiso y Rol
"""

class Permiso(models.Model):
    '''Define la clase de permisos'''
    nombre = models.CharField(max_length=70, blank=False, null=False)
    ''' tipo 1 = Permisos de administracion
        tipo 2 = Permisos de Proyecto'''
    tipo = models.IntegerField()

    def __str__(self):
        return self.nombre



class Rol(models.Model):
    """
    Se definen los campos necesarios para el modelo Rol
    """

    id = models.AutoField
    nombre = models.CharField(max_length=50, unique=True,blank=False, null=False)
    descripcion = models.CharField(max_length=300)
    permisos = models.ManyToManyField('Permiso', blank=False)

    def __str__(self):
        return self.nombre

    def get_id(self):
        return self.id

    def set_nombre(self,nom):
        self.nombre = nom

    def set_descripcion(self, desc):
        self.descripcion = desc

    def get_descripcion(self):
        return self.descripcion

    def set_permiso(self, permisos):
        self.permisos = permisos

    def get_permiso(self):
        return self.permisos

    def list_permisos(self):
        permisos = self.permiso.filter()
        lista = list(permisos)
        return lista

    def agregar_permiso(self, permiso):
        self.permisos.append(permiso)
Views
-------------------
from django.shortcuts import render
from django.views.generic import ListView, CreateView, UpdateView
from .models import Rol
from django.contrib.auth.models import User
from rol.forms import *
from django.contrib import messages
from django.shortcuts import render, redirect
from django.http import HttpResponseForbidden
from django.urls import reverse
from django.contrib.messages.views import SuccessMessageMixin
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.contrib.auth.mixins import LoginRequiredMixin
# Create your views here.

"""
Funcion eliminar Rol
"""
def eliminar3(request, rol_id):
    rol = Rol.objects.get(id=rol_id)
    rol.delete()
    return redirect("index")

@method_decorator(login_required, name='dispatch')
class RolListView(LoginRequiredMixin, ListView):
    """
    Vista de la lista de Roles
    """

    template_name = 'rol/list.html'
    model = Rol
    queryset = Rol.objects.all()

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Roles"
        return context


@method_decorator(login_required, name='dispatch')
class CreateRolView(SuccessMessageMixin, LoginRequiredMixin, CreateView):
    """
    Vista para la creacion de un nuevo Rol
    """

    template_name = 'rol/rol.html'
    model = Rol
    success_url = '/index'
    form_class = CreateRolForm
    success_message = 'Se ha creado el rol'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        # Add in a QuerySet of all the books
        context['title'] = "Crear Rol"
        return context


@method_decorator(login_required, name='dispatch')

class UpdateRolView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    """
    Vista para la modificacion de un Rol
    """

    template_name = 'rol/rol.html'
    model = Rol
    # permission_required=
    form_class = UpdateRolForm
    success_url = '/index'
    success_message = 'Los cambios se guardaron correctamente'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        # Add in a QuerySet of all the books
        context['title'] = "Modificar Rol"
        return context

    def get_object(self, queryset=None):
        return Rol.objects.get(pk=self.kwargs['pk'])

    def get_absolute_url(self):
        return reverse('update_rol', kwargs={'pk': self.kwargs['pk']})

Urls
-------------------
from django.conf.urls import url
from django.urls import path
from . import views
from .views import eliminar3
# from django.contrib.auth.views import login
from .models import *

"""
URL para el ver, crear y modificar roles
"""

urlpatterns = [
	url(r'^$', views.RolListView.as_view(),name='rol_list'),
	url(r'^create/$', views.CreateRolView.as_view(), name='create_rol'),
	path(route='update_rol/<int:pk>/', view=views.UpdateRolView.as_view(), name='update_rol'),
	path("eliminar/<int:rol_id>/", eliminar3, name="eliminar3"),
]

Tests
-------------------
from django.test import TestCase
import unittest
from rol.models import Permiso, Rol

# Create your tests here.

class Test(unittest.TestCase):

    """
    Test de creacion de Rol vacio
    """
    def test_creacionRol(self):
        rol = Rol()
        self.assertIsNotNone(rol)
