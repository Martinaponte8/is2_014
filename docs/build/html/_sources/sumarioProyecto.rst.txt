Glosario
==================

Apps
-------------------

..  automodule:: proyecto.apps
    :members:

Admin
-------------------
from django.contrib import admin

# Register your models here.
from .models import *
from rol.models import Rol
from rol.models import Permiso

class ProyectoDetalleInLine(admin.TabularInline):
    model = ProyectoDetalle

class ProyectoAdmin(admin.ModelAdmin):
    inlines = (ProyectoDetalleInLine,)

admin.site.register(Proyecto,ProyectoAdmin)

Forms
-------------------
from django import forms
from django.forms import inlineformset_factory
from .models import *

class CreateProjectForm(forms.ModelForm):
    """
        Formulario para la creacion de un nuevo Proyecto
        """

    class Meta:
        model = Proyecto
        fields = ('nombre', 'fecha_inicio', 'fecha_fin', 'estado', 'descripcion')

    widgets = {
        'fecha_inicio': forms.DateTimeField(),
        'fecha_fin': forms.DateTimeField()
    }

    labels = {
        'nombre': 'Nombre del Proyecto',
        'fecha_inicio': 'Fecha de Inicio',
        'fecha_fin': 'Fecha de Fin',
        'estado': 'Estado',
        'descripcion': 'Descripcion ',

    }


class UpdateProjectForm(forms.ModelForm):
    """
        Formulario para la modificacion de un Proyecto
        """
    class Meta:
        model = Proyecto
        fields = ('nombre', 'fecha_inicio', 'fecha_fin', 'estado', 'descripcion')

    widgets = {
        'fecha_inicio': forms.DateTimeField(),
        'fecha_fin': forms.DateTimeField()
    }

    labels = {
        'nombre': 'Nombre del Proyecto',
        'fecha_inicio': 'Fecha de Inicio',
        'fecha_fin': 'Fecha de Fin',
        'estado': 'Estado',
        'descripcion': 'Descripcion ',

    }

class CreateFlujoForm(forms.ModelForm):
    class Meta:
        model = Flujo
        fields = ('nombre','proyecto','descripcion')
    widgets = {
        'proyecto': forms.HiddenInput()
    }

class UpdateFlujoForm(forms.ModelForm):
    class Meta:
        model = Flujo
        fields = ('nombre','proyecto','descripcion')
    widgets = {
        'proyecto': forms.HiddenInput()
    }


class ProyectoDetalleForm(forms.ModelForm):
   class Meta:
        model = ProyectoDetalle
        exclude = ()
        fields = ('usuario','rol')


class FaseForm(forms.ModelForm):
    class Meta:
        model = Fase
        exclude = ()
        fields = ('nombre',)

ProyectoDetalleFormSet = inlineformset_factory(Proyecto,ProyectoDetalle,form=ProyectoDetalleForm,extra=1)
FaseFormSet = inlineformset_factory(Flujo,Fase,form=FaseForm,extra=1)


Models
-------------------
import datetime
from django.db import models
from rol.models import Rol
from usuarios.models import Usuario

# Create your models here.
"""
Definimos los estados de un Proyecto
"""

ESTADOS_PROYECTO = (
    ('Pendiente', 'Pendiente'), # cuando se crea
    ('Activo', 'Activo'), # cuando se inicia
    ('Cancelado','Cancelado'), # cuando se cancela
    ('Terminado', 'Terminado'), # cuando se aprueba uno finalizado
    ('Suspendido', 'Suspendido'), # cuando se inactiva el proyecto
)

class Proyecto(models.Model):
    nombre = models.CharField(max_length=20)
    fecha_inicio = models.DateField('Fecha de Inicio Proyecto')
    fecha_fin = models.DateField('Fecha de Fin Proyecto')
    estado = models.CharField(max_length=25, choices=ESTADOS_PROYECTO, default='PEN')
    descripcion= models.TextField()

    def __str__(self):
        return self.nombre

class ProyectoDetalle(models.Model):
    proyecto = models.ForeignKey(Proyecto, on_delete=models.CASCADE)
    usuario = models.ForeignKey(Usuario, on_delete=models.PROTECT)
    rol = models.ForeignKey(Rol, on_delete=models.PROTECT)

ESTADOS_FASE = (
    ('To Do', 'To Do'), # pendiente
    ('Doing', 'Doing'), # en proceso
    ('Do','Do'), #terminado
)

class Flujo(models.Model):
    proyecto = models.ForeignKey(Proyecto, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=20)
    descripcion = models.TextField()

class Fase(models.Model):
    flujo = models.ForeignKey(Flujo,on_delete=models.CASCADE)
    nombre = models.CharField(max_length=20)
    estado = models.CharField(max_length=25, choices=ESTADOS_FASE, default='To Do')

Views
-------------------
from .models import Proyecto
"""
Vistas del Proyecto
"""

"""
Funcion eliminar Proyecto
"""
def eliminar2(request, project_id):
    project = Proyecto.objects.get(id=project_id)
    project.delete()
    return redirect("index")

@method_decorator(login_required, name='dispatch')
class UpdateOptionsView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    """
    Vista de modificar Proyectos
    """

    template_name = 'proyecto/options.html'
    model = Proyecto
    form_class = UpdateProjectForm
    success_url = '/proyectos/opciones/'
    success_message = 'Los cambios se guardaron correctamente'

    def get(self,request,*args,**kwargs):
        self.object = self.get_object()
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        detalles = ProyectoDetalle.objects.filter(proyecto=self.object).order_by('pk')
        detalles_data = []
        for detalle in detalles:
            d = {'usuario': detalle.usuario,
                 'rol': detalle.rol}
            detalles_data.append(d)
        ProyectoDetalleFormSet = inlineformset_factory(Proyecto, ProyectoDetalle, form=ProyectoDetalleForm,extra=len(detalles_data))
        proyectodetalle_orden_formset = ProyectoDetalleFormSet(initial=detalles_data)
        return self.render_to_response(self.get_context_data(form=form, proyectodetalles=proyectodetalle_orden_formset))

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Modificar Proyecto"
        return context

    def get_object(self, queryset=None):
        return Proyecto.objects.get(pk=self.kwargs['pk_proyecto'])

    def get_absolute_url(self):
        return reverse('update_options', kwargs={'pk_proyecto': self.kwargs['pk_proyecto']})

    def post(self,request,*args,**kwargs):
        self.object = self.get_object()
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        proyectodetalle_formset = ProyectoDetalleFormSet(request.POST)
        if form.is_valid() and proyectodetalle_formset.is_valid():
            return self.form_valid(form, proyectodetalle_formset)
        else:
            return self.form_invalid(form, proyectodetalle_formset)

    def form_valid(self, form, proyectodetalle_formset):
        self.object = form.save()
        proyectodetalle_formset.instance = self.object
        ProyectoDetalle.objects.filter(proyecto=self.object).delete()
        proyectodetalle_formset.save()
        return HttpResponseRedirect(self.get_success_url())

    def form_invalid(self, form,proyectodetalle_formset):
        return self.render_to_response(self.get_context_data(form=form, proyectodetalles=proyectodetalle_formset))

@method_decorator(login_required, name='dispatch')
class FlujoListView(LoginRequiredMixin, ListView):
    template_name = 'proyecto/flujo_list.html'
    model = Flujo
    queryset = Flujo.objects.all()

    def get(self,request,*args,**kwargs):
        self.object = None
        self.object_list = Flujo.objects.filter(proyecto=self.kwargs['pk_proyecto'])
        proyecto = Proyecto.objects.get(pk=self.kwargs['pk_proyecto'])
        return self.render_to_response(self.get_context_data(project=proyecto,object_list=self.object_list))

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Flujos de Proyecto"
        return context


@method_decorator(login_required, name='dispatch')
class UpdateOptionsView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    """
       Vistas para modificacion de las opciones de proyecto
    """

    template_name = 'proyecto/options.html'
    model = Proyecto
    form_class = UpdateProjectForm
    success_url = '/proyectos/opciones/'
    success_message = 'Los cambios se guardaron correctamente'

    def get(self,request,*args,**kwargs):
        self.object = self.get_object()
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        detalles = ProyectoDetalle.objects.filter(proyecto=self.object).order_by('pk')
        detalles_data = []
        for detalle in detalles:
            d = {'usuario': detalle.usuario,
                 'rol': detalle.rol}
            detalles_data.append(d)
        ProyectoDetalleFormSet = inlineformset_factory(Proyecto, ProyectoDetalle, form=ProyectoDetalleForm,extra=len(detalles_data))
        proyectodetalle_orden_formset = ProyectoDetalleFormSet(initial=detalles_data)
        return self.render_to_response(self.get_context_data(form=form, proyectodetalles=proyectodetalle_orden_formset))

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Modificar Proyecto"
        return context

    def get_object(self, queryset=None):
        return Proyecto.objects.get(pk=self.kwargs['pk_proyecto'])

    def get_absolute_url(self):
        return reverse('update_options', kwargs={'pk_proyecto': self.kwargs['pk_proyecto']})

    def post(self,request,*args,**kwargs):
        self.object = self.get_object()
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        proyectodetalle_formset = ProyectoDetalleFormSet(request.POST)
        if form.is_valid() and proyectodetalle_formset.is_valid():
            return self.form_valid(form, proyectodetalle_formset)
        else:
            return self.form_invalid(form, proyectodetalle_formset)

    def form_valid(self, form, proyectodetalle_formset):
        self.object = form.save()
        proyectodetalle_formset.instance = self.object
        ProyectoDetalle.objects.filter(proyecto=self.object).delete()
        proyectodetalle_formset.save()
        return HttpResponseRedirect(self.get_success_url())

    def form_invalid(self, form,proyectodetalle_formset):
        return self.render_to_response(self.get_context_data(form=form, proyectodetalles=proyectodetalle_formset))

@method_decorator(login_required, name='dispatch')
class FlujoListView(LoginRequiredMixin, ListView):
    template_name = 'proyecto/flujo_list.html'
    model = Flujo
    queryset = Flujo.objects.all()

    def get(self,request,*args,**kwargs):
        self.object = None
        self.object_list = Flujo.objects.filter(proyecto=self.kwargs['pk_proyecto'])
        proyecto = Proyecto.objects.get(pk=self.kwargs['pk_proyecto'])
        return self.render_to_response(self.get_context_data(project=proyecto,object_list=self.object_list))

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Flujos de Proyecto"
        return context

@method_decorator(login_required, name='dispatch')
class ProjectListView(LoginRequiredMixin, ListView):
    template_name = 'proyecto/list.html'
    model = Proyecto
    queryset = Proyecto.objects.all()

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Proyectos"
        return context

@method_decorator(login_required, name='dispatch')
class OptionsListView(LoginRequiredMixin, ListView):
    template_name = 'proyecto/opciones_list.html'
    model = Proyecto
    queryset = Proyecto.objects.all()

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Opciones de Proyectos"
        return context

"""
Vistas de Ejecucion
"""

@method_decorator(login_required, name='dispatch')
class EjecucionListView(LoginRequiredMixin, ListView):
    template_name = 'proyecto/ejecuciones_list.html'
    model = Proyecto
    queryset = Proyecto.objects.all()

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Ejecuciones de Proyectos"
        return context

@method_decorator(login_required, name='dispatch')
class CreateFlujoView(SuccessMessageMixin, LoginRequiredMixin, CreateView):
    template_name = 'proyecto/flujo.html'
    model = Flujo
    success_url = '../'
    form_class = CreateFlujoForm
    success_message = 'Se ha creado el flujo'

    def get_object(self, queryset=None):
        obj = Flujo()
        proyecto = Proyecto.objects.get(pk=self.kwargs['pk_proyecto'])
        obj.proyecto = proyecto
        return obj

    def get(self,request,*args,**kwargs):
        self.object = self.get_object()
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        fases_orden_formset = FaseFormSet()
        return self.render_to_response(self.get_context_data(form=form, fases=fases_orden_formset))

    def get_context_data(self, **kwargs):
        context = super(CreateFlujoView,self).get_context_data(**kwargs)
        context['title'] = "Crear Flujo"
        return context

    def post(self,request,*args,**kwargs):
        self.object = None
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        fases_formset = FaseFormSet(request.POST)
        if form.is_valid() and fases_formset.is_valid():
            return self.form_valid(form,fases_formset)
        else:
            return self.form_invalid(form,fases_formset)

    def form_valid(self, form, fases_formset):
        self.object = form.save()
        fases_formset.instance = self.object
        fases_formset.save()
        return HttpResponseRedirect(self.success_url)

    def form_invalid(self, form,fases_formset):
        return self.render_to_respose(self.get_context_data(form=form,fases=fases_formset))

@method_decorator(login_required, name='dispatch')
class CreateProjectView(SuccessMessageMixin, LoginRequiredMixin, CreateView):
    template_name = 'proyecto/proyecto.html'
    model = Proyecto
    success_url = '/proyectos/'
    form_class = CreateProjectForm
    success_message = 'Se ha creado el proyecto'

    def get(self,request,*args,**kwargs):
        self.object = None
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        proyectodetalle_orden_formset = ProyectoDetalleFormSet()
        return self.render_to_response(self.get_context_data(form=form, proyectodetalles=proyectodetalle_orden_formset))

    def get_context_data(self, **kwargs):
        context = super(CreateProjectView,self).get_context_data(**kwargs)
        context['title'] = "Crear Proyecto"
        return context

    def post(self,request,*args,**kwargs):
        self.object = None
        form_class = self.get_form_class()
        form = self.get_form()
        proyectodetalle_formset = ProyectoDetalleFormSet(request.POST)

        if form.is_valid() and proyectodetalle_formset.is_valid():
            return self.form_valid(form,proyectodetalle_formset)
        else:
            return self.form_invalid(form,proyectodetalle_formset)

    def form_valid(self, form, proyectodetalle_formset):
        self.object = form.save()
        proyectodetalle_formset.instance = self.object
        proyectodetalle_formset.save()
        return HttpResponseRedirect(self.success_url)

    def form_invalid(self, form,proyectodetalle_formset):
        return self.render_to_respose(self.get_context_data(form=form,proyectodetalles=proyectodetalle_formset))


@method_decorator(login_required, name='dispatch')
class UpdateProjectView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    template_name = 'proyecto/proyecto.html'
    model = Proyecto
    form_class = UpdateProjectForm
    success_url = '/proyectos/'
    success_message = 'Los cambios se guardaron correctamente'

    def get(self,request,*args,**kwargs):
        self.object = self.get_object()
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        detalles = ProyectoDetalle.objects.filter(proyecto=self.object).order_by('pk')
        detalles_data = []
        for detalle in detalles:
            d = {'usuario': detalle.usuario,
                 'rol': detalle.rol}
            detalles_data.append(d)
        ProyectoDetalleFormSet = inlineformset_factory(Proyecto, ProyectoDetalle, form=ProyectoDetalleForm,extra=len(detalles_data))
        proyectodetalle_orden_formset = ProyectoDetalleFormSet(initial=detalles_data)
        return self.render_to_response(self.get_context_data(form=form, proyectodetalles=proyectodetalle_orden_formset))

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Modificar Proyecto"
        return context

    def get_object(self, queryset=None):
        return Proyecto.objects.get(pk=self.kwargs['pk_proyecto'])

    def get_absolute_url(self):
        return reverse('update_project', kwargs={'pk_proyecto': self.kwargs['pk_proyecto']})

    def post(self,request,*args,**kwargs):
        self.object = self.get_object()
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        proyectodetalle_formset = ProyectoDetalleFormSet(request.POST)
        if form.is_valid() and proyectodetalle_formset.is_valid():
            return self.form_valid(form,proyectodetalle_formset)
        else:
            return self.form_invalid(form,proyectodetalle_formset)

    def form_valid(self, form, proyectodetalle_formset):
        self.object = form.save()
        proyectodetalle_formset.instance = self.object
        ProyectoDetalle.objects.filter(proyecto=self.object).delete()
        proyectodetalle_formset.save()
        return HttpResponseRedirect(self.get_success_url())

    def form_invalid(self, form,proyectodetalle_formset):
        return self.render_to_response(self.get_context_data(form=form, proyectodetalles=proyectodetalle_formset))


@method_decorator(login_required, name='dispatch')
class UpdateFlujoView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    template_name = 'proyecto/flujo.html'
    model = Flujo
    success_url = '../'
    form_class = CreateFlujoForm
    success_message = 'Se ha modificado el flujo'

    def get(self,request,*args,**kwargs):
        self.object = self.get_object()
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        fases = Fase.objects.filter(flujo=self.object).order_by('pk')
        fases_data = []
        for fase in fases:
            d = {'nombre': fase.nombre,}
            fases_data.append(d)
        FaseFormSet = inlineformset_factory(Flujo, Fase, form=FaseForm,extra=len(fases_data))
        fases_orden_formset = FaseFormSet(initial=fases_data)
        return self.render_to_response(self.get_context_data(form=form, fases=fases_orden_formset))

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Modificar Flujo"
        return context

    def get_object(self, queryset=None):
        return Flujo.objects.get(pk=self.kwargs['pk'])

    def get_absolute_url(self):
        return reverse('update_project', kwargs={'pk_proyecto': self.kwargs['pk_proyecto']})

    def post(self,request,*args,**kwargs):
        self.object = self.get_object()
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        fases_formset = FaseFormSet(request.POST)
        if form.is_valid() and fases_formset.is_valid():
            return self.form_valid(form,fases_formset)
        else:
            return self.form_invalid(form,fases_formset)

    def form_valid(self, form, fases_formset):
        self.object = form.save()
        fases_formset.instance = self.object
        Fase.objects.filter(flujo=self.object).delete()
        fases_formset.save()
        return HttpResponseRedirect(self.get_success_url())

    def form_invalid(self, form,fases_formset):
        return self.render_to_response(self.get_context_data(form=form, fases=fases_formset))

@method_decorator(login_required, name='dispatch')
class UpdateDetalleProyectoView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    template_name = 'proyecto/asignacion_roles.html'
    model = Proyecto
    form_class = UpdateProjectForm
    success_url = '../'
    success_message = 'Los cambios se guardaron correctamente'

    def get(self,request,*args,**kwargs):
        self.object = self.get_object()
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        detalles = ProyectoDetalle.objects.filter(proyecto=self.object).order_by('pk')
        detalles_data = []
        for detalle in detalles:
            d = {'usuario': detalle.usuario,
                 'rol': detalle.rol}
            detalles_data.append(d)
        ProyectoDetalleFormSet = inlineformset_factory(Proyecto, ProyectoDetalle, form=ProyectoDetalleForm,extra=len(detalles_data))
        proyectodetalle_orden_formset = ProyectoDetalleFormSet(initial=detalles_data)
        return self.render_to_response(self.get_context_data(form=form, proyectodetalles=proyectodetalle_orden_formset))

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Modificar Proyecto"
        return context

    def get_object(self, queryset=None):
        return Proyecto.objects.get(pk=self.kwargs['pk_proyecto'])

    def get_absolute_url(self):
        return reverse('update_project', kwargs={'pk_proyecto': self.kwargs['pk_proyecto']})

    def post(self,request,*args,**kwargs):
        self.object = self.get_object()
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        proyectodetalle_formset = ProyectoDetalleFormSet(request.POST)
        if form.is_valid() and proyectodetalle_formset.is_valid():
            return self.form_valid(form,proyectodetalle_formset)
        else:
            return self.form_invalid(form,proyectodetalle_formset)

    def form_valid(self, form, proyectodetalle_formset):
        self.object = form.save()
        proyectodetalle_formset.instance = self.object
        ProyectoDetalle.objects.filter(proyecto=self.object).delete()
        proyectodetalle_formset.save()
        return HttpResponseRedirect(self.get_success_url())

    def form_invalid(self, form,proyectodetalle_formset):
        return self.render_to_response(self.get_context_data(form=form, proyectodetalles=proyectodetalle_formset))


@method_decorator(login_required, name='dispatch')
class UpdateProjectView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    template_name = 'proyecto/proyecto.html'
    model = Proyecto
    form_class = UpdateProjectForm
    success_url = '/proyectos/'
    success_message = 'Los cambios se guardaron correctamente'

    def get(self,request,*args,**kwargs):
        self.object = self.get_object()
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        detalles = ProyectoDetalle.objects.filter(proyecto=self.object).order_by('pk')
        detalles_data = []
        for detalle in detalles:
            d = {'usuario': detalle.usuario,
                 'rol': detalle.rol}
            detalles_data.append(d)
        ProyectoDetalleFormSet = inlineformset_factory(Proyecto, ProyectoDetalle, form=ProyectoDetalleForm,extra=len(detalles_data))
        proyectodetalle_orden_formset = ProyectoDetalleFormSet(initial=detalles_data)
        return self.render_to_response(self.get_context_data(form=form, proyectodetalles=proyectodetalle_orden_formset))

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Modificar Proyecto"
        return context

    def get_object(self, queryset=None):
        return Proyecto.objects.get(pk=self.kwargs['pk_proyecto'])

    def get_absolute_url(self):
        return reverse('update_project', kwargs={'pk_proyecto': self.kwargs['pk_proyecto']})

    def post(self,request,*args,**kwargs):
        self.object = self.get_object()
        form_class = self.get_form_class()
        form = self.get_form(form_class)
        proyectodetalle_formset = ProyectoDetalleFormSet(request.POST)
        if form.is_valid() and proyectodetalle_formset.is_valid():
            return self.form_valid(form,proyectodetalle_formset)
        else:
            return self.form_invalid(form,proyectodetalle_formset)

    def form_valid(self, form, proyectodetalle_formset):
        self.object = form.save()
        proyectodetalle_formset.instance = self.object
        ProyectoDetalle.objects.filter(proyecto=self.object).delete()
        proyectodetalle_formset.save()
        return HttpResponseRedirect(self.get_success_url())

    def form_invalid(self, form,proyectodetalle_formset):
        return self.render_to_response(self.get_context_data(form=form, proyectodetalles=proyectodetalle_formset))


@method_decorator(login_required, name='dispatch')
class UpdateEjecucionView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    template_name = 'proyecto/ejecucion.html'
    model = Proyecto
    form_class = UpdateProjectForm
    success_url = '/proyectos/ejecuciones/'
    success_message = 'Los cambios se guardaron correctamente'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Ejecucion de Proyecto"
        return context

    def get_object(self, queryset=None):
        return Proyecto.objects.get(pk=self.kwargs['pk_proyecto'])

    def get_absolute_url(self):
        return reverse('update_ejecucion', kwargs={'pk_proyecto': self.kwargs['pk_proyecto']})

Urls
-------------------
from django.conf.urls import url
from django.urls import path
from . import views
from .views import eliminar2
#from tipoUserStory.views import *
#from userstory.views import *
#from sprint.views import *

"""
Definicion de URLs contenidas en proyectos
"""

urlpatterns = [

    #administracion

    url(r'^$', views.ProjectListView.as_view(),name='project_list'),
	url(r'^create/$', views.CreateProjectView.as_view(), name='create_project'),
    path(route='update_project/<int:pk_proyecto>/', view=views.UpdateProjectView.as_view(), name='update_project'),
    path("eliminar/<int:project_id>/", eliminar2, name="eliminar2"),
    #definicion

    url(r'^opciones/$', views.OptionsListView.as_view(), name='options_project'),
    path(route='opciones/<int:pk_proyecto>/', view=views.UpdateOptionsView.as_view(), name='update_options'),
    path(route='opciones/<int:pk_proyecto>/flujos/create/', view=views.CreateFlujoView.as_view(), name='create_options_flujo'),
    path(route='opciones/<int:pk_proyecto>/flujos/<int:pk>/', view=views.UpdateFlujoView.as_view(), name='update_options_flujo'),
    path(route='opciones/<int:pk_proyecto>/flujos/', view=views.FlujoListView.as_view(), name='update_options_flujo_list'),
    #path(route='opciones/<int:pk_proyecto>/tipoUserStory/', view=tipoUserStoryListView.as_view(), name='user_story_type_list'),
    #path(route='opciones/<int:pk_proyecto>/tipoUserStory/create/', view=CreateUserStoryTypeView.as_view(), name='create_user_story_type'),
	#path(route='opciones/<int:pk_proyecto>/tipoUserStory/<int:pk>/', view=UpdateUserStoryTypeView.as_view(), name='update_user_story_type'),
    path(route='opciones/<int:pk_proyecto>/asignarRoles/', view=views.UpdateDetalleProyectoView.as_view(), name='update_roles_proyecto'),

    #ejecucion

    url(r'^ejecuciones/$', views.EjecucionListView.as_view(), name='options_project'),
    path(route='ejecuciones/<int:pk_proyecto>/', view=views.UpdateEjecucionView.as_view(), name='update_ejecucion'),
    #path(route='ejecuciones/<int:pk_proyecto>/userstory/', view=UserStoryListView.as_view(), name='user_story_list'),
    #path(route='ejecuciones/<int:pk_proyecto>/userstory/create/', view=CreateUserStoryView.as_view(), name='create_userstory'),
	#path(route='ejecuciones/<int:pk_proyecto>/userstory/<int:pk>/', view=UpdateUserStoryView.as_view(), name='update_userstory'),
    #path(route='ejecuciones/<int:pk_proyecto>/productbacklog/',view=ProductBacklogListView.as_view(), name = 'product_backlog'),
    #path(route='ejecuciones/<int:pk_proyecto>/sprint/', view=SprintListView.as_view(), name='sprint_list'),
    #path(route='ejecuciones/<int:pk_proyecto>/sprint/create/', view=CreateSprintView.as_view(), name='create_sprint'),
	#path(route='ejecuciones/<int:pk_proyecto>/sprint/<int:pk>/', view=UpdateSprintView.as_view(), name='update_sprint'),
]
Tests
-------------------
import unittest
import time

from proyecto.models import Proyecto
from proyecto.models import Flujo
from proyecto.models import Fase

class Test(unittest.TestCase):
    """
        Test Creacion de Proyecto
    """
    def test_creacionProyecto(self):
        project = Proyecto()
        self.assertIsNotNone(project)
    """
        Test validacion de fechas de inicio y fin de proyecto
    """
    def test_fechasProyecto(self):
        proyectoPrueba = Proyecto(nombre='ProyectoPrueba', fecha_inicio='21/09/2021', fecha_fin='22/10/2021')
        fechaInicio = time.strptime(proyectoPrueba.fecha_inicio, "%d/%m/%Y")
        fechaFin = time.strptime(proyectoPrueba.fecha_fin, "%d/%m/%Y")
        self.assertLessEqual(fechaInicio, fechaFin, "La Fecha de Inicio debe ser anterior a la fecha de Fin")
    """
        Test Creacion de Flujo
    """
    def test_creacionFlujo(self):
        proyectoPrueba= Proyecto('ProyectoPrueba','21/09/2021','22/10/2021','Pendiente','descripcion')
        flujo= Flujo(proyectoPrueba, 'Flujo', 'desc flujo')
        self.assertIsNotNone(flujo)
    """
        Test Creacion de Fase
    """
    def test_creacionFase(self):
        proyectoPrueba = Proyecto('ProyectoPrueba', '21/09/2021','22/10/2021', 'Pendiente', 'descripcion')
        flujo1 = Flujo(proyectoPrueba, 'Flujo', 'desc flujo')
        fase= Fase(flujo1, 'Fase', 'desc fase')
        self.assertIsNotNone(fase)





