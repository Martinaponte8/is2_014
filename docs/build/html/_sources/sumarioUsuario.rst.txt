Glosario
==================

Apps
-------------------

..  automodule:: usuarios.apps
    :members:

Admin
-------------------

Forms
-------------------
from django import forms
from django.contrib.auth.forms import SetPasswordForm

from .models import Usuario
from rol.models import Permiso

class CreateUserForm(forms.ModelForm):
    """
    Formulario para la creacion de un  Usuario
    """

    def _init_(self, *args, **kwargs):
        super(CreateUserForm, self)._init_(*args, **kwargs)
        permisos_all = Permiso.objects.filter()
        p = self.fields['permisos'].widget
        permisos = []
        for permiso in permisos_all:
            permisos.append((permiso.id, permiso.nombre))
        p.permisos = permisos

    password = forms.CharField(widget=forms.PasswordInput)
    class Meta:
        model = Usuario
        fields = ('username',
                  'first_name',
                  'last_name',
                  'estado',
                  'ci',
                  'telefono',
                  'direccion',
                  'descripcion',
                  'password',
                  'permisos'
                  )
        widgets = {
            'permisos': forms.CheckboxSelectMultiple(),
        }

    def save(self, commit=True):
        user = super(CreateUserForm, self).save(commit=False)
        user.set_password(self.cleaned_data["password"])
        if commit:
            user.save()
            self.save_m2m()
        return user

class UpdateUserForm(forms.ModelForm):
    """
    Formulario para la modificacion de un Usuario
    """

    class Meta:
        model = Usuario
        fields = ('username',
                  'first_name',
                  'last_name',
                  'estado',
                  'ci',
                  'telefono',
                  'direccion',
                  'descripcion',
                  'password',
                  'permisos'
                  )

        widgets = {
            'permisos': forms.CheckboxSelectMultiple(),
            'password': forms.PasswordInput()
        }

    def save(self, commit=True):
        user = super(UpdateUserForm, self).save(commit=False)
        user.set_password(self.cleaned_data["password"])
        if commit:
            user.save()
            self.save_m2m()
        return user

    def _init_(self, *args, **kwargs):
        super(UpdateUserForm, self)._init_(*args, **kwargs)
        instance = getattr(self, 'instance', None)
        if instance and instance.pk:
            self.fields['username'].widget.attrs['readonly'] = True
        permisos_all = Permiso.objects.filter()
        p = self.fields['permisos'].widget
        permisos = []
        for permiso in permisos_all:
            permisos.append((permiso.id, permiso.nombre))
        p.choices = permisos

    def clean_username(self):
        instance = getattr(self, 'instance', None)
        if instance and instance.pk:
            return instance.username
        else:
             return self.cleaned_data['username']


Models
-------------------
from django.db import models
from django.contrib.auth.models import User
from django.contrib.auth.models import AbstractUser

"""
Se definen los estados de un Usuario
"""
ESTADOS_USUARIO = (
    ('Activo', 'Activo'),
    ('Inactivo', 'Inactivo')
)

"""
Definimos el modelo Usuario
"""
class Usuario(AbstractUser):
    ''' Implementa la clase de Usuarios, hereda campos de AbstractUser en la que se
    encuentran campos necesarios como Nombre, Apellido, Contrase√±a, email, '''
    """
       Se definen los demas campos necesarios para el modelo
       """

    estado = models.CharField(max_length=8, choices=ESTADOS_USUARIO, default='Activo')
    ci = models.CharField(max_length=10)
    telefono= models.CharField(max_length=50)
    direccion = models.CharField(max_length=200)
    descripcion = models.TextField()
    permisos = models.ManyToManyField('rol.Permiso', blank=False)

    def __str__(self):
        return self.username
Views
-------------------
from django.shortcuts import render, get_object_or_404, redirect

#from .forms import UpdateUserForm, CreateUserForm
from .forms import *
import requests
from .models import Usuario
#from django import forms
from django.views.generic import ListView, CreateView, UpdateView
from django.contrib.messages.views import SuccessMessageMixin
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse

"""
Funcion eliminar Usuario
"""
def eliminar(request, user_id):
    user = Usuario.objects.get(id=user_id)
    user.delete()
    return redirect("index")

Urls
-------------------
from django.conf.urls import url
from django.urls import path
#from django import forms
#from usuarios import views
#
from . import views
from .views import eliminar

"""
URL para Usuarios: crear, listar, modificar y eliminar
"""

urlpatterns = [
    url(r'^$', views.UserListView.as_view(), name='user_list'), url(r'^create/$', views.CreateUserView.as_view(), name='create_user'),
    path(route='update_user/<int:pk>/', view=views.UpdateUserView.as_view(), name='update_user'),
    #path(route='update_user/<int:user_id>/', view=views.eliminar(), name='eliminar')
    path("eliminar/<int:user_id>/", eliminar, name="eliminar"),
]
Tests
-------------------
from django.test import TestCase
import unittest
from usuarios.models import Usuario

# Create your tests here.

class Test(unittest.TestCase):

    """
    Test de creacion de Usuario sin nombre
    """
    def test_nombre(self):
        nombre = Usuario().first_name
        self.assertIsNotNone(nombre)

    """
        Test de creacion de Usuario sin apellido
    """
    def test_apellido(self):
        apellido = Usuario().last_name
        self.assertIsNotNone(apellido)

